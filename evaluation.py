# -*- coding: utf-8 -*-
"""evaluation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1swalufI9uivhP3G2x2ow03XTDOiRRGrF
"""

import os
import torch
import pandas as pd
from torchvision import transforms
from PIL import Image
from timm import create_model  # 用于加载 Swin Transformer
import argparse

# 创建并加载 Swin Transformer 模型
def load_swin_model(model_path, device):
    model = create_model('swin_base_patch4_window7_224', pretrained=False, num_classes=2)
    # Ensure model is loaded to the right device
    model.load_state_dict(torch.load(model_path, map_location=device))
    model.eval()
    return model

# 图像预处理
def preprocess_image(image_path):
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor()
    ])
    image = Image.open(image_path).convert("RGB")
    return transform(image).unsqueeze(0)

# 评估模型并生成 CSV 文件
def evaluate_model(input_dir, model, device, output_file='evaluation.csv'):
    results = []
    for img_name in os.listdir(input_dir):
        img_path = os.path.join(input_dir, img_name)
        image = preprocess_image(img_path).to(device)

        with torch.no_grad():
            outputs = model(image)
            _, predicted_class = torch.max(outputs, 1)
            results.append([img_name, predicted_class.item()])

    # 保存结果为 CSV 文件
    df = pd.DataFrame(results, columns=['name', 'predicted_class'])
    df.to_csv(output_file, index=False)
    print(f"Evaluation complete. Results saved to {output_file}")

if __name__ == "__main__":
    # 解析命令行参数
    parser = argparse.ArgumentParser(description="Evaluate Swin Transformer on glomeruli image patches")
    parser.add_argument('--input-dir', type=str, required=True, help="Path to the directory containing the test images")
    parser.add_argument('--model-path', type=str, required=True, help="Path to the trained model file (e.g., swin_transformer_best.pth)")
    parser.add_argument('--output-file', type=str, default='evaluation.csv', help="Output CSV file for predictions")
    args = parser.parse_args()

    # 确定运行设备
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    # 加载模型
    model = load_swin_model(args.model_path, device)
    model.to(device)

    # 运行评估并保存预测结果
    evaluate_model(args.input_dir, model, device, args.output_file)